function connect(dependencies, arg1, arg2) {
  // Supported signatures:
  // connect(mapToProps, displayName: string, extendedCtrl?: () => {});
  // connect(mapToProps, extendedCtrl: () => {});

  const displayName = typeof arg1 === 'string' ? arg1 : 'Unknown'
  const extendedCtrl = typeof arg1 === 'string' ? arg2 : arg1

  if (typeof extendedCtrl === 'function') {
    return [
      'cerebral',
      '$scope',
      function(cerebral, $scope) {
        cerebral.connect(
          this,
          $scope,
          dependencies,
          displayName
        )
        extendedCtrl.call(this)
      },
    ]
  } else if (Array.isArray(extendedCtrl)) {
    const ctrl = extendedCtrl.pop()

    return ['cerebral', '$scope'].concat(extendedCtrl, function(
      cerebral,
      $scope,
      ...services
    ) {
      cerebral.connect(
        this,
        $scope,
        dependencies,
        displayName
      )
      ctrl.apply(this, services)
    })
  } else {
    return [
      'cerebral',
      '$scope',
      function(cerebral, $scope) {
        cerebral.connect(
          this,
          $scope,
          dependencies,
          displayName
        )
      },
    ]
  }
}

export default connect
