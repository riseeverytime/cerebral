import { autorun } from 'mobx'
import { getChangedProps, throwError, isObject, noop } from 'cerebral/internal'

class View {
  constructor({ dependencies, props, controller, displayName, onUpdate }) {
    if (!dependencies) {
      throwError(
        'There is no reason to connect a component that has no dependencies'
      )
    }

    if (typeof dependencies !== 'function') {
      throwError('You have to define a function for the dependencies')
    }

    this.props = props
    this.controller = controller
    this._displayName = displayName
    this._hasWarnedBigComponent = false
    this.isUnmounted = false
    this.updateComponent = onUpdate || noop
    this.propKeys = Object.keys(props || {})
    this._verifyPropsWarned = false
    this.dependencies = dependencies
    this.autorun = null
    this.cerebralProps = {}
    this.isMounted = false
  }
  registerAutorun() {
    this.autorun = autorun(() => {
      this.cerebralProps = this.dependencies({
        state: this.controller.state,
        signals: this.controller.signals,
        props: this.props,
      })

      if (this.isMounted) {
        this.onUpdate()
      }
    })
  }
  mount() {
    this.registerAutorun()
    this.isMounted = true

    if (!isObject(this.cerebralProps)) {
      throwError('You have to return dependencies from the dependency function')
    }

    if (this.controller.devtools) {
      // this.controller.devtools.updateComponentsMap(this, depsMap)
    }
  }
  onUpdate() {
    if (this.isUnmounted) {
      return
    }

    this.updateComponent()
  }
  unMount() {
    if (this.autorun) {
      this.autorun()
    }

    if (this.controller.devtools) {
      // this.controller.devtools.updateComponentsMap(this, null, depsMap)
    }

    this.isUnmounted = true
  }
  onPropsUpdate(props, nextProps) {
    const propsChanges = getChangedProps(props, nextProps)

    if (propsChanges.length) {
      this.props = nextProps
      this.autorun()
      this.registerAutorun()

      return true
    }

    return false
  }
  /*
    Runs whenever the component has an update and renders.
    Extracts the actual values from dependency trackers and/or tags
  */
  getProps(props = {}, includeProps = true) {
    const dependenciesProps = this.cerebralProps

    if (
      this.controller.devtools &&
      this.controller.devtools.bigComponentsWarning &&
      !this._hasWarnedBigComponent &&
      Object.keys(dependenciesProps).length >=
        this.controller.devtools.bigComponentsWarning
    ) {
      console.warn(
        `Component named ${this
          ._displayName} has a lot of dependencies, consider refactoring or adjust this option in devtools`
      )
      this._hasWarnedBigComponent = true
    }

    return Object.assign({}, includeProps ? props : {}, dependenciesProps)
  }
}

export default View
