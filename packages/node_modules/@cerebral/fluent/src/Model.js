/* import { extractModuleProp, BaseModel } from 'cerebral/internal'
import { ObservableMap } from 'mobx'

class Model extends BaseModel {
  constructor(controller) {
    super(controller)
    const mobxModel = extractModuleProp(
      controller.module,
      'model',
      (model, module) => {
        let mobxModel = types.model(model || {})

        if (module.getters) {
          mobxModel = mobxModel.views(state =>
            Object.keys(module.getters).reduce((getters, getterKey) => {
              Object.defineProperty(getters, getterKey, {
                enumerable: true,
                get() {
                  return module.getters[getterKey].call(state)
                },
              })

              return getters
            }, {})
          )
        }

        if (module.computed) {
          mobxModel = mobxModel.views(state =>
            Object.keys(module.computed).reduce((computed, computedKey) => {
              computed[computedKey] = (...arg) => {
                return module.computed[computedKey].apply(state, arg)
              }

              return computed
            }, {})
          )
        }

        return mobxModel
      }
    )

    this.state = mobxModel
      .actions(() => ({
        runInBatch(fn) {
          fn()
        },
      }))
      .create(this.initialState)
  }
}

export default Model
*/
