/* eslint-env mocha */
// @ts-ignore: stupid module
import { deepEqual } from 'assert'
import { sequenceFactory } from 'function-tree/fluent'
import { Controller, Module } from './'

describe('Fluent', () => {
  it('should allow state changes in actions', () => {
    type State = {
      foo: string
    }
    type Signals = {

    }
    type Context = {
      state: State
    }
    const rootModule = Module<State, Signals>({
      state: {
        foo: '123'
      },
      signals: {
        test: sequenceFactory<Context, { foo: string }>(s => s.action(function test ({ state, props }) {
          state.foo = props.foo
        }))
      },
    })
    const controller = Controller(rootModule)

    controller.signals.test()

    assert.equal(controller.state.foo, 'bar2')
  })
})