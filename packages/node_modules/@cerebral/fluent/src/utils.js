import { isObservable } from 'mobx'
import { throwError, isObject } from 'cerebral/internal'

export function updateIn(obj, path, cb) {
  return path.reduce((currentValue, key, index) => {
    if (index > 0 && currentValue === undefined) {
      throwError(`You are setting to path "${path}", but it is not valid`)
    }

    if (index === path.length - 1) {
      cb(currentValue, key)
    }

    return currentValue[key]
  }, obj)
}

export function traverse(obj, cb) {
  return Object.keys(obj).reduce((newObj, key) => {
    if (isObservable(obj[key])) {
      newObj[key] = obj[key]

      return newObj
    }
    const propertyDescriptor = Object.getOwnPropertyDescriptor(obj, key)

    if ('get' in propertyDescriptor) {
      Object.defineProperty(newObj, key, propertyDescriptor)
    } else if (isObject(obj[key])) {
      newObj[key] = traverse(obj[key], cb)
      newObj[key] = cb(newObj, key)
    } else {
      newObj[key] = cb(obj, key)
    }

    return newObj
  }, {})
}
