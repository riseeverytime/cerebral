import { computed as mobxComputed } from 'mobx';

export type ComputedValue<T> = {
	get(): T
}

export class ComputedClass<T> {
  callback: (state: any) => T
  instance: ComputedValue<T>
  getState: () => any
  constructor (callback: (state: any) => T) {
    this.callback = callback
  }
  get() {
    this.instance = this.instance || mobxComputed(() => this.callback(this.getState()))

    return this.instance.get()
  }
}
export function Computed<T>(callback: (state: any) =>  T):  ComputedClass<T> {
  return new ComputedClass(callback);
}
