import { isObservable } from 'mobx'
import {
  ComputedClass
} from './Computed'
import { throwError, isObject } from 'cerebral/internal'

export function updateIn(obj: {[key: string]: any}, path: string[], cb: (currentValue: any, key: string) => void) {
  return path.reduce((currentValue, key, index) => {
    if (index > 0 && currentValue === undefined) {
      throwError(`You are setting to path "${path}", but it is not valid`)
    }

    if (index === path.length - 1) {
      cb(currentValue, key)
    }

    return currentValue[key]
  }, obj)
}

export function traverse(obj: {[key: string]: any}, cb: (newObj: {[key: string]: any}, key: string, path: string[]) => any, path: string[] = []) {
  return Object.keys(obj).reduce((newObj: {[key: string]: any}, key: string) => {
    if (isObservable(obj[key]) || obj[key] instanceof ComputedClass) {
      newObj[key] = obj[key]

      return newObj
    }
    const propertyDescriptor = Object.getOwnPropertyDescriptor(obj, key)

    if (propertyDescriptor && 'get' in propertyDescriptor) {
      Object.defineProperty(newObj, key, propertyDescriptor)
    } else if (isObject(obj[key])) {
      path.push(key)
      newObj[key] = traverse(obj[key], cb, path)
      path.pop()
      newObj[key] = cb(newObj, key, path)
    } else {
      newObj[key] = cb(obj, key, path)
    }

    return newObj
  }, {})
}
