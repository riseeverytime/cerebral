import { ObservableMap as MobxObservableMap } from 'mobx';
import { BaseControllerClass, ModuleClass, ControllerOptions } from 'cerebral';
import { SequenceBuilder } from 'function-tree/fluent';
export { default as connect, ConnectFactory } from './connect';
export declare type SignalWithPayload<Props> = (props: Props) => void;
export declare type Signal = (props?: void) => void;
export { sequenceFactory, IContext, IContextWithPaths, IContextWithNoDataPaths } from 'function-tree/fluent';
export { ComputedValue, Computed } from './Computed';
export { default as Container } from './Container';
export declare type ObservableMap<Type> = MobxObservableMap<Type>;
export declare function ObservableMap<Type>(values: {
    [key: string]: Type;
}): MobxObservableMap<Type>;
export { Module, Provider } from 'cerebral';
export declare function Sequence<Context, Output = {}>(arg: (props: SequenceBuilder<Context, {}>) => SequenceBuilder<Context, Output>): () => Output;
export declare function SequenceWithProps<Context, Props, Output = Props>(arg: (props: SequenceBuilder<Context, Props>) => SequenceBuilder<Context, Output>): (props: Props) => Output;
export declare function SequenceFactory<Context, Output = {}>(): <Output = {}>(arg: (props: SequenceBuilder<Context, {}>) => SequenceBuilder<Context, Output>) => () => Output;
export declare function SequenceWithPropsFactory<Context, Props, Output = Props>(): <Props, Output = Props>(arg: (props: SequenceBuilder<Context, Props>) => SequenceBuilder<Context, Output>) => (props: Props) => Output;
export declare class FluentController<State = {}, Signals = {}> extends BaseControllerClass {
    state: State;
    signals: Signals;
    devtools: any;
    contextProviders: any;
    constructor(rootModule: ModuleClass, options: ControllerOptions);
    addModule(path: string, module: ModuleClass): void;
    removeModule(path: string): void | null;
}
export declare function Controller<State = {}, Signals = {}>(rootModule: ModuleClass, options?: ControllerOptions): FluentController<State, Signals>;
