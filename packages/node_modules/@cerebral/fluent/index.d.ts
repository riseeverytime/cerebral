import { ObservableMap as MobxObservableMap } from 'mobx';
import { BaseControllerClass, ModuleClass, ControllerOptions } from 'cerebral';
export { ConnectFactory } from './connect';
export { SequenceFactory, SequenceWithPropsFactory, IContext, IBranchContext, IBranchWithNoDataContext } from 'function-tree/fluent';
export { ComputedValue, Computed } from './Computed';
export { default as Container } from './Container';
export declare type Dictionary<Type> = MobxObservableMap<Type>;
export declare function Dictionary<Type>(values: {
    [key: string]: Type;
}): MobxObservableMap<Type>;
export { Module, Provider } from 'cerebral';
export declare class FluentController<State = {}, Signals = {}> extends BaseControllerClass {
    state: State;
    signals: Signals;
    devtools: any;
    contextProviders: any;
    constructor(rootModule: ModuleClass, options: ControllerOptions);
    addModule(path: string, module: ModuleClass): void;
    removeModule(path: string): void | null;
}
export declare function Controller<State = {}, Signals = {}>(rootModule: ModuleClass, options?: ControllerOptions): FluentController<State, Signals>;
