import { sequence, parallel, Primitive } from "../../";

export interface IContext<TProps> {
	props: TProps,
}

export interface IBranchContext<TProps, TPaths> extends IContext<TProps> {
	path: { [key in keyof TPaths]: (props: TPaths[key]) => TPaths[key] }
}

export interface ISequenceBuilder<TContext, TProps> {
	action<TOutput>(...action: ((input: TContext & IContext<TProps>) => TOutput | Promise<TOutput>)[]) : SequenceBuilder<TContext, TProps & TOutput>
	action<TOutput>(name: string, ...action: ((input: TContext & IContext<TProps>) => TOutput | Promise<TOutput>)[]) : SequenceBuilder<TContext, TProps & TOutput>
	action<TOutput>(...action: any[]) : SequenceBuilder<TContext, TProps & TOutput>
	branch<TOutput, TPaths>(action: ((input: TContext & IBranchContext<TProps, TPaths>) => TOutput)) : {
		paths: (paths: { [key in keyof TPaths]: (input: SequenceBuilder<TContext, TProps & TPaths[key]>) => SequenceBuilder<TContext, TProps & TPaths[key]> }) => SequenceBuilder<TContext, TProps & TOutput>
	}
	parallel<TOutput>(name: string, chain: ((input: SequenceBuilder<TContext, TProps>) => SequenceBuilder<TContext, TOutput>)) : SequenceBuilder<TContext, TProps & TOutput>
	parallel<TOutput>(chain: ((input: SequenceBuilder<TContext, TProps>) => SequenceBuilder<TContext, TOutput>)) : SequenceBuilder<TContext, TProps & TOutput>
	parallel<TOutput>(...args: any[]) : SequenceBuilder<TContext, TProps & TOutput>
	sequence<TOutput = void>(seq: (input: TProps) => TOutput | (() => TOutput)): SequenceBuilder<TContext, TProps & TOutput>
}

export class SequenceBuilder<TContext = {}, TProps = {}> implements ISequenceBuilder<TContext, TProps> {
	private sequenceArray: any[];

	constructor(sequenceArray: any[]) {
		this.sequenceArray = sequenceArray;
	}
	action<TOutput>(...action: ((input: TContext & IContext<TProps>) => TOutput | Promise<TOutput>)[]) : SequenceBuilder<TContext, TProps & TOutput>
	action<TOutput>(name: string, ...action: ((input: TContext & IContext<TProps>) => TOutput | Promise<TOutput>)[]) : SequenceBuilder<TContext, TProps & TOutput>
	action<TOutput>(...action: any[]) : SequenceBuilder<TContext, TProps & TOutput> {
		var typeFirst = typeof action[0] === "string";
		var actions = <any[]> (typeFirst ? action.splice(1) : action);
		actions.forEach(element => {
			typeFirst && Object.defineProperty(element, "name", { value: action[0] });
		});
		this.sequenceArray.push(...actions);
		return new SequenceBuilder<TContext, TProps & TOutput>(this.sequenceArray);
	}
	branch<TOutput, TPaths>(action: ((input: TContext & IBranchContext<TProps, TPaths>) => TOutput)): {
		paths: (paths: { [key in keyof TPaths]: (input: SequenceBuilder<TContext, TProps & TPaths[key]>) => SequenceBuilder<TContext, TProps & TPaths[key]> }) => SequenceBuilder<TContext, TProps & TOutput>
	};
	branch<TOutput, TPaths>(action: ((input: any) => TOutput)): {
		paths: (paths: { [key in keyof TPaths]: (input: SequenceBuilder<TContext, TProps & TPaths[key]>) => SequenceBuilder<TContext, TProps & TPaths[key]> }) => SequenceBuilder<TContext, TProps & TOutput>
	} {
		this.sequenceArray.push(action);

		return {
			paths: (paths: { [key in keyof TPaths]: (input: SequenceBuilder<TContext, TProps & TPaths[key]>) => SequenceBuilder<TContext, TProps & TPaths[key]> }): SequenceBuilder<TContext, TProps & TOutput> => {
				let outputSequence: { [key in keyof TPaths]?: any[] } = {};
				for(let key in paths) {
					let cb = new SequenceBuilder<TContext, TProps>([]);
					let chain = paths[key];
                    chain(cb as any);
					outputSequence[key] = cb.sequenceArray;
				}

				this.sequenceArray.push(outputSequence);

				return new SequenceBuilder<TContext, TProps & TOutput>(this.sequenceArray);
			}
		};
	}
	parallel<TOutput>(name: string, chain: ((input: SequenceBuilder<TContext, TProps>) => SequenceBuilder<TContext, TOutput>)) : SequenceBuilder<TContext, TProps & TOutput>
	parallel<TOutput>(chain: ((input: SequenceBuilder<TContext, TProps>) => SequenceBuilder<TContext, TOutput>)) : SequenceBuilder<TContext, TProps & TOutput>
	parallel<TOutput>(...args: any[]) : SequenceBuilder<TContext, TProps & TOutput> {
		var cb = new SequenceBuilder<TContext, TProps>([]);
		var callback = typeof(args[0]) == "string" ? args[1] : args[0];
		var name = typeof(args[0]) == "string" ? args[0] : "";
		var result = callback(cb);
		this.sequenceArray.push(parallel(name, result.sequenceArray));
		return new SequenceBuilder<TContext, TProps & TOutput>(this.sequenceArray);
	}
	sequence<TOutput = void>(seq: (input: TProps) => TOutput | (() => TOutput)): SequenceBuilder<TContext, TProps & TOutput> {
		this.sequenceArray.push(...(seq as any));
		return new SequenceBuilder<TContext, TProps & TOutput>(this.sequenceArray);
	}
}

export function sequenceFactory<TContext, TProps>(arg: (input: SequenceBuilder<TContext, TProps>) => SequenceBuilder<TContext, TProps>): Primitive {
	var builder = new SequenceBuilder<TContext, TProps>([]);
	arg(builder);
	return (builder as any).sequenceArray;
}

export function Sequence<Context, Output = {}>(
	arg: (props: SequenceBuilder<Context, {}>) => SequenceBuilder<Context, Output>
): () => Output {
	return sequenceFactory<Context, {}>(arg as any) as any;
}

export function SequenceWithProps<Context, Props, Output = Props>(
	arg: (props: SequenceBuilder<Context, Props>) => SequenceBuilder<Context, Output>
): (props: Props) => Output {
	return sequenceFactory<Context, Props>(arg as any) as any;
}

export function SequenceFactory<Context, Output = {}>() {
	function returned<Output = {}>(arg: (props: SequenceBuilder<Context, {}>) => SequenceBuilder<Context, Output>): () => Output { 
		return sequenceFactory<Context, {}>(arg as any) as any;
	}
	return returned;
}

export function SequenceWithPropsFactory<Context, Props, Output = Props>() {
	function returned<Props, Output = Props>(arg: (props: SequenceBuilder<Context, Props>) => SequenceBuilder<Context, Output>): (props: Props) => Output { 
		return sequenceFactory<Context, Props>(arg as any) as any;
	}
	return returned;
}