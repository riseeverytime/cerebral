/* eslint-env mocha */
// @ts-ignore: stupid module
import assert from 'assert'
import { chainFactory, ChainBuilder, IContext, IContextWithPaths } from './'
import { Primitive } from '../../';

interface MyModel {
    stateData: string
}

interface ProviderContext { 
    //http: HttpModule
    state: MyModel
};

type MyContext<TInput> = IContext<TInput> & ProviderContext;
type MyContextPaths<TInput, TPathModel> = IContextWithPaths<TInput, TPathModel> & ProviderContext;

function sequenceWithNoInput<TOutput = void>(arg: (input: ChainBuilder<ProviderContext, {}>) => ChainBuilder<ProviderContext, TOutput>): () => TOutput {
    return chainFactory<ProviderContext, {}>(arg) as any;
};

function sequence<TInput, TOutput = TInput>(arg: (input: ChainBuilder<ProviderContext, TInput>) => ChainBuilder<ProviderContext, TOutput>): (input: TInput) => TOutput {
    return chainFactory<ProviderContext, TInput>(arg as any) as any;
};

interface Input {
    name: string,
    age: number
}

describe('Fluent', () => {
  it('should return array', () => {

    function action1(context: MyContext<{}>) {
        
    }

    var seq = sequenceWithNoInput(x => x
        .action(action1)
    ) as any as Array<any>;

    assert.deepEqual(seq, [action1])
  })

  it('should return paths correctly', () => {

    interface PathModel {
        success: PathResult,
        error: PathResult
    }
    
    interface PathResult {
        newName: string
    }

    function action1(context: MyContext<Input>) { }

    function action2(context: MyContext<Input>) { }

    function action3(context: MyContextPaths<Input, PathModel>) : PathResult {
        context.state.stateData = "Something";
        return context.path.success({ newName: "John" });
    }

    var seq = sequence<Input>(x => x
        .action(action1)
        .actionWithPaths(action3)
        .paths({
            success: z => z.action(action1, action2),
            error: z => z.action(action2)
        })
    ) as any as Array<any>;

    assert.deepEqual(seq, [
        action1, 
        action3, 
        { 
            success: [action1, action2], 
            error: [action2] 
        } 
    ])
  })
})