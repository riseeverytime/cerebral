/* eslint-env mocha */
// @ts-ignore: stupid module
import assert from 'assert'
import { sequenceFactory, SequenceBuilder, IContext, IContextWithPaths } from './'
import { Primitive } from '../../';

interface MyModel {
    stateData: string
}

interface ProviderContext {
    //http: HttpModule
    state: MyModel
};

type MyContext<TProps> = IContext<TProps> & ProviderContext;
type MyContextPaths<TProps, TPaths> = IContextWithPaths<TProps, TPaths> & ProviderContext;

function sequenceWithNoInput<TOutput = void>(arg: (input: SequenceBuilder<ProviderContext, {}>) => SequenceBuilder<ProviderContext, TOutput>): () => TOutput {
    return sequenceFactory<ProviderContext, {}>(arg) as any;
};

function sequence<TProps, TOutput = TProps>(arg: (input: SequenceBuilder<ProviderContext, TProps>) => SequenceBuilder<ProviderContext, TOutput>): (input: TProps) => TOutput {
    return sequenceFactory<ProviderContext, TProps>(arg as any) as any;
};

interface Props {
    name: string,
    age: number
}

describe('Fluent', () => {
  it('should return array', () => {

    function action1(context: MyContext<{}>) {

    }

    var seq = sequenceWithNoInput(x => x
        .action(action1)
    ) as any as Array<any>;

    assert.deepEqual(seq, [action1])
  })

  it('should return paths correctly', () => {

    interface PathResult {
        newName: string
    }

    interface Paths {
        success: PathResult,
        error: PathResult
    }

    function action1(context: MyContext<Props>) { }

    function action2(context: MyContext<Props>) { }

    function action3(context: MyContextPaths<Props, Paths>) : PathResult {
        context.state.stateData = "Something";
        return context.path.success({ newName: "John" });
    }

    var seq = sequence<Props>(x => x
        .action(action1)
        .pathsAction(action3)
        .paths({
            success: z => z.action(action1, action2),
            error: z => z.action(action2)
        })
    ) as any as Array<any>;

    assert.deepEqual(seq, [
        action1,
        action3,
        {
            success: [action1, action2],
            error: [action2]
        }
    ])
  })
})
