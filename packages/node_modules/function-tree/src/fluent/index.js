import { parallel } from "../../";
import { debounce } from '../../factories/';
export class SequenceBuilder {
    constructor(sequenceArray) {
        this.sequenceArray = sequenceArray;
    }
    action(...action) {
        var typeFirst = typeof action[0] === "string";
        var actions = (typeFirst ? action.splice(1) : action);
        actions.forEach(element => {
            typeFirst && Object.defineProperty(element, "name", { value: action[0] });
        });
        this.sequenceArray.push(...actions);
        return new SequenceBuilder(this.sequenceArray);
    }
    branch(action) {
        this.sequenceArray.push(action);
        return {
            paths: (paths) => {
                let outputSequence = generatePathSequence(paths);
                this.sequenceArray.push(outputSequence);
                return new SequenceBuilder(this.sequenceArray);
            }
        };
    }
    parallel(...args) {
        var cb = new SequenceBuilder([]);
        var callback = typeof (args[0]) == "string" ? args[1] : args[0];
        var name = typeof (args[0]) == "string" ? args[0] : "";
        var result = callback(cb);
        this.sequenceArray.push(parallel(name, result.sequenceArray));
        return new SequenceBuilder(this.sequenceArray);
    }
    sequence(seq) {
        this.sequenceArray.push(...seq);
        return new SequenceBuilder(this.sequenceArray);
    }
    when(callback) {
        return this.branch(function when(context) {
            return callback(context) ? context.path.true({}) : context.path.false({});
        });
    }
    debounce(seconds) {
        return this.branch(debounce(seconds));
    }
    equals(callback) {
        return this.branch(function equals(context) {
            var result = String(callback(context));
            return context.path[result]({});
        });
    }
}
function generatePathSequence(paths) {
    let outputSequence = {};
    for (let key in paths) {
        let cb = new SequenceBuilder([]);
        let chain = paths[key];
        chain(cb);
        outputSequence[key] = cb.sequenceArray;
    }
    return outputSequence;
}
export function sequenceFactory(arg) {
    var builder = new SequenceBuilder([]);
    arg(builder);
    return builder.sequenceArray;
}
export function Sequence(arg) {
    return sequenceFactory(arg);
}
export function SequenceWithProps(arg) {
    return sequenceFactory(arg);
}
export function SequenceFactory() {
    function returned(arg) {
        return sequenceFactory(arg);
    }
    return returned;
}
export function SequenceWithPropsFactory() {
    function returned(arg) {
        return sequenceFactory(arg);
    }
    return returned;
}
