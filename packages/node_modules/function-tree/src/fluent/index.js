import { parallel } from '../../'
export class ChainBuilder {
  constructor(sequenceArray) {
    this.sequenceArray = sequenceArray
  }
  action(...action) {
    var typeFirst = typeof action[0] === 'string'
    var actions = typeFirst ? action.splice(1) : action
    actions.forEach(element => {
      typeFirst && Object.defineProperty(element, 'name', { value: action[0] })
    })
    this.sequenceArray.push(...actions)
    return new ChainBuilder(this.sequenceArray)
  }
  actionWithPaths(action) {
    this.sequenceArray.push(action)
    return {
      paths: paths => {
        let outputSequence = {}
        for (let key in paths) {
          let cb = new ChainBuilder([])
          let chain = paths[key]
          chain(cb)
          outputSequence[key] = cb.sequenceArray
        }
        this.sequenceArray.push(outputSequence)
        return new ChainBuilder(this.sequenceArray)
      },
    }
  }
  parallel(...args) {
    var cb = new ChainBuilder([])
    var callback = typeof args[0] === 'string' ? args[1] : args[0]
    var name = typeof args[0] === 'string' ? args[0] : ''
    var result = callback(cb)
    this.sequenceArray.push(parallel(name, result.sequenceArray))
    return new ChainBuilder(this.sequenceArray)
  }
  sequence(seq) {
    this.sequenceArray.push(...seq)
    return new ChainBuilder(this.sequenceArray)
  }
}
export function chainFactory(arg) {
  var builder = new ChainBuilder([])
  arg(builder)
  return builder.sequenceArray
}
