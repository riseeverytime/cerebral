/* eslint-env mocha */
import { FunctionTreeError, FunctionTreeExecutionError } from './'
import assert from 'assert'

describe('errors', () => {
  it('should have base error', () => {
    const error = new FunctionTreeError(new Error('foo'))

    assert.ok(error instanceof Error)
    assert.strictEqual(error.message, 'foo')
    assert.ok(error.stack)
    assert.strictEqual(error.toJSON().name, 'FunctionTreeError')
    assert.strictEqual(error.toJSON().message, 'foo')
    assert.ok(error.toJSON().stack)
  })
  it('should have extended execution error', () => {
    const baseError = new Error('foo')
    const execution = { name: 'exec' }
    const funcDetails = { name: 'func', functionIndex: 1 }
    const payload = { foo: 'bar' }
    const error = new FunctionTreeExecutionError(
      execution,
      funcDetails,
      payload,
      baseError
    )

    assert.ok(error instanceof Error)
    assert.ok(error instanceof FunctionTreeError)
    assert.strictEqual(error.message, 'foo')
    assert.strictEqual(error.execution, execution)
    assert.strictEqual(error.funcDetails, funcDetails)
    assert.strictEqual(error.payload, payload)
    assert.ok(error.stack)
    assert.strictEqual(error.toJSON().name, 'FunctionTreeExecutionError')
    assert.strictEqual(error.toJSON().message, 'foo')
    assert.strictDeepEqual(error.toJSON().execution, { name: 'exec' })
    assert.strictDeepEqual(error.toJSON().funcDetails, {
      name: 'func',
      functionIndex: 1,
    })
    assert.strictDeepEqual(error.toJSON().payload, { foo: 'bar' })
    assert.ok(error.toJSON().stack)
  })
})
