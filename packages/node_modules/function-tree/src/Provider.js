class Provider {
  constructor(definition, { cache = true, wrap = true } = {}) {
    this.verifyDefinition(definition)
    this.definition = definition
    this.instance = null
    this.cache = cache
    this.wrap = wrap
  }
  verifyDefinition(definition) {
    if (
      typeof definition !== 'object' &&
      (definition === null || typeof definition !== 'function')
    ) {
      throw new Error('The definition passed as Provider is not valid')
    }

    if (typeof definition === 'object') {
      Object.keys(definition).forEach(key => {
        if (typeof definition[key] !== 'function') {
          throw new Error(
            `The property ${key} passed to Provider is not a method`
          )
        }
      })
    }
  }
  get(context, functionDetails, payload, prevPayload) {
    if (!this.instance || this.cache === false) {
      if (typeof this.definition === 'function') {
        this.instance = this.definition(
          context,
          functionDetails,
          payload,
          prevPayload
        )
      } else {
        this.instance = this.definition
      }
    }

    return this.instance
  }
}

export default Provider
