class Provider {
  constructor(definition, { wrap = true } = {}) {
    this.verifyDefinition(definition)
    this.wrap = wrap

    this.ProviderConstructor = function(context) {
      this.context = context
    }
    this.ProviderConstructor.prototype = definition

    this.WrappedProviderConstructor = function(name, context) {
      this.context = context
      this.providerName = name
    }
    this.WrappedProviderConstructor.prototype = Object.keys(
      definition
    ).reduce((wrappedProvider, key) => {
      const originalFunc = definition[key]

      wrappedProvider[key] = function(...args) {
        this.context.debugger.send({
          method: `${this.providerName}.${key}`,
          args: args,
        })

        return originalFunc.apply(this, args)
      }

      return wrappedProvider
    }, {})
  }
  verifyDefinition(definition) {
    if (typeof definition !== 'object' || definition === null) {
      throw new Error('The definition passed as Provider is not valid')
    }

    Object.keys(definition).forEach(key => {
      if (typeof definition[key] !== 'function') {
        throw new Error(
          `The property ${key} passed to Provider is not a method`
        )
      }
    })
  }
  get(context) {
    return new this.ProviderConstructor(context)
  }
  getWrapped(name, context) {
    return new this.WrappedProviderConstructor(name, context)
  }
}

export default Provider
