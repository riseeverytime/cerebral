/* eslint-env mocha */
import { Primitive, Sequence, Parallel } from './primitives'
import assert from 'assert'

describe('primitives', () => {
  it('should correctly initiate primitive', () => {
    const items = [function a() {}]
    const primitive = new Primitive('primitive', 'test', items)

    assert.ok(primitive instanceof Primitive)
    assert.strictEqual(primitive.type, 'primitive')
    assert.strictEqual(primitive.name, 'test')
    assert.strictDeepEqual(primitive.items, items)
    assert.strictEqual(primitive.toJSON().name, 'test')
    assert.strictEqual(primitive.toJSON()._functionTreePrimitive, true)
    assert.strictEqual(primitive.toJSON().type, 'primitive')
    assert.strictDeepEqual(primitive.toJSON().items, items)
  })
  describe('sequence', () => {
    it('should have extended Primitive', () => {
      const items = [function a() {}]
      const sequence = new Sequence(items)

      assert.ok(sequence instanceof Primitive)
      assert.strictEqual(sequence.type, 'sequence')
      assert.strictEqual(sequence.name, null)
      assert.strictDeepEqual(sequence.items, items)
      assert.strictEqual(sequence.toJSON().name, null)
      assert.strictEqual(sequence.toJSON()._functionTreePrimitive, true)
      assert.strictEqual(sequence.toJSON().type, 'sequence')
      assert.strictDeepEqual(sequence.toJSON().items, items)
    })
    it('should set name of sequence', () => {
      const items = [function a() {}]
      const sequence = new Sequence('test', items)

      assert.ok(sequence instanceof Primitive)
      assert.strictEqual(sequence.type, 'sequence')
      assert.strictEqual(sequence.name, 'test')
      assert.strictDeepEqual(sequence.items, items)
      assert.strictEqual(sequence.toJSON().name, 'test')
      assert.strictEqual(sequence.toJSON()._functionTreePrimitive, true)
      assert.strictEqual(sequence.toJSON().type, 'sequence')
      assert.strictDeepEqual(sequence.toJSON().items, items)
    })
  })
  describe('parallel', () => {
    it('should have extended Primitive', () => {
      const items = [function a() {}]
      const parallel = new Parallel(items)

      assert.ok(parallel instanceof Primitive)
      assert.strictEqual(parallel.type, 'parallel')
      assert.strictEqual(parallel.name, null)
      assert.strictDeepEqual(parallel.items, items)
      assert.strictEqual(parallel.toJSON().name, null)
      assert.strictEqual(parallel.toJSON()._functionTreePrimitive, true)
      assert.strictEqual(parallel.toJSON().type, 'parallel')
      assert.strictDeepEqual(parallel.toJSON().items, items)
    })
    it('should set name of parallel', () => {
      const items = [function a() {}]
      const parallel = new Parallel('test', items)

      assert.ok(parallel instanceof Primitive)
      assert.strictEqual(parallel.type, 'parallel')
      assert.strictEqual(parallel.name, 'test')
      assert.strictDeepEqual(parallel.items, items)
      assert.strictEqual(parallel.toJSON().name, 'test')
      assert.strictEqual(parallel.toJSON()._functionTreePrimitive, true)
      assert.strictEqual(parallel.toJSON().type, 'parallel')
      assert.strictDeepEqual(parallel.toJSON().items, items)
    })
  })
})
