/* eslint-env mocha */
import { FunctionTree } from './FunctionTree'
import Provider from './Provider'
import Devtools from './devtools'
import assert from 'assert'

describe('Provider', () => {
  beforeEach(() => {
    Devtools.prototype.createSocket = function() {
      this.ws = { open() {} }
    }
  })
  it('should be able to add provider', () => {
    const ft = new FunctionTree({
      provider: new Provider({
        foo() {
          return 'bar'
        },
      }),
    })
    ft.run(function test({ provider }) {
      assert.equal(provider.foo(), 'bar')
    })
  })
  it('should throw when using locked provider keys', () => {
    assert.throws(
      () =>
        new FunctionTree({
          props: new Provider({
            foo() {
              return 'bar'
            },
          }),
        })
    )
  })
  it('should be able to create with callback', () => {
    const ft = new FunctionTree({
      provider: new Provider(
        (context, functionDetails, payload, prevPayload) => {
          assert.ok(context.execution)
          assert.ok(functionDetails)
          assert.ok(payload)
          assert.equal(prevPayload, null)
          return {
            foo() {
              return 'bar'
            },
          }
        }
      ),
    })
    ft.run(function test({ provider }) {
      assert.equal(provider.foo(), 'bar')
    }, {})
  })
  it('should cache provider by default', () => {
    const ft = new FunctionTree({
      provider: new Provider(
        (context, functionDetails, payload, prevPayload) => {
          return {
            foo() {
              return payload.foo
            },
          }
        }
      ),
    })
    const devtools = new Devtools({
      host: 'localhost:8585',
    })

    devtools.add(ft)

    ft.run(
      [
        function test({ provider }) {
          return { foo: 'bar2' }
        },
        function test2({ provider }) {
          assert.equal(provider.foo(), 'bar')
        },
      ],
      {
        foo: 'bar',
      }
    )
  })
  it('should be able to turn off caching', () => {
    const ft = new FunctionTree({
      provider: new Provider(
        (context, functionDetails, payload, prevPayload) => {
          return {
            foo() {
              return payload.foo
            },
          }
        },
        { cache: false }
      ),
    })
    const devtools = new Devtools({
      host: 'localhost:8585',
    })

    devtools.add(ft)

    ft.run(
      [
        function test({ provider }) {
          return { foo: 'bar2' }
        },
        function test2({ provider }) {
          assert.equal(provider.foo(), 'bar2')
        },
      ],
      {
        foo: 'bar',
      }
    )
  })
})
