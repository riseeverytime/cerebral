import { Primitive } from "../";

export interface IContext<TProps> {
    props: TProps;
}

export interface IContextWithPaths<TProps, TPaths> extends IContext<TProps> {
    path: {
        [key in keyof TPaths]: (props: TPaths[key]) => TPaths[key];
    };
}

export declare class SequenceBuilder<TContext = {}, TProps = {}> {
    private sequenceArray;
    constructor(sequenceArray: any[]);
    action<TOutput>(...action: ((props: TContext & IContext<TProps>) => TOutput | Promise<TOutput>)[]): SequenceBuilder<TContext, TProps & TOutput>;
    action<TOutput>(name: string, ...action: ((props: TContext & IContext<TProps>) => TOutput | Promise<TOutput>)[]): SequenceBuilder<TContext, TProps & TOutput>;
    pathsAction<TOutput, TPaths>(action: ((props: TContext & IContextWithPaths<TProps, TPaths>) => TOutput)): {
        paths: (paths: {
            [key in keyof TPaths]: (props: SequenceBuilder<TContext, TProps & TPaths[key]>) => SequenceBuilder<TContext, TProps & TPaths[key]>;
        }) => SequenceBuilder<TContext, TProps & TOutput>;
    };
    parallel<TOutput>(name: string, chain: ((props: SequenceBuilder<TContext, TProps>) => SequenceBuilder<TContext, TOutput>)): SequenceBuilder<TContext, TProps & TOutput>;
    parallel<TOutput>(chain: ((props: SequenceBuilder<TContext, TProps>) => SequenceBuilder<TContext, TOutput>)): SequenceBuilder<TContext, TProps & TOutput>;
    sequence<TOutput = void>(seq: (props: TProps) => TOutput | (() => TOutput)): SequenceBuilder<TContext, TProps & TOutput>;
}

export declare function sequenceFactory<TContext, TProps>(arg: (props: SequenceBuilder<TContext, TProps>) => SequenceBuilder<TContext, TProps>): Primitive;
