import {
  BaseControllerClass,
  Compute,
  ControllerOptions,
  ModuleClass,
  ModuleDefinition,
  Sequence,
} from '../'

type Action<P, T> = (context: { props: P }) => T

export interface SnapshotTest {
  mutate: (method: string, path: string, value: any) => SnapshotTest
  mock: (path: string, value: any) => SnapshotTest
  mockResolvedPromise: (path: string, value: any) => SnapshotTest
  mockRejectedPromise: (path: string, value: any) => SnapshotTest
  run: (sequence: string, payload: {}) => Promise<any>
}

export function Snapshot(module: ModuleDefinition): SnapshotTest

export interface RunActionResult<P, T> {
  controller: BaseControllerClass
  props: P
  state: any
  output: T
}

interface RunSequenceResult0<P, T0> {
  '0': RunActionResult<P, T0>
}

interface RunSequenceResult1<P, T0, T1> {
  '0': RunActionResult<P, T0>
  '1': RunActionResult<P, T1>
}

interface RunSequenceResult2<P, T0, T1, T2> {
  '0': RunActionResult<P, T0>
  '1': RunActionResult<P, T1>
  '2': RunActionResult<P, T2>
}

export function runAction<P = any, T = any>(
  action: Action<P, Promise<T> | T>,
  fixtures?: { props: P & any } & any
): Promise<RunActionResult<P, T>>

export function runCompute<T>(computed: T, fixtures?: any): T

export function runSequence<P, T0>(
  sequence: [Action<P, Promise<T0> | T0>],
  fixtures?: { props: P & any } & any,
  options?: any
): Promise<RunSequenceResult0<P, T0>>

export function runSequence<P, T0, T1>(
  sequence: [Action<P, Promise<T0> | T0>, Action<any, Promise<T1> | T1>],
  fixtures?: { props: P & any } & any,
  options?: any
): Promise<RunSequenceResult1<P, T0, T1>>

export function runSequence<P, T0, T1, T2>(
  sequence: [
    Action<P, Promise<T0> | T0>,
    Action<any, Promise<T1> | T1>,
    Action<any, Promise<T2> | T2>
  ],
  fixtures?: { props: P & any } & any,
  options?: any
): Promise<RunSequenceResult2<P, T0, T1, T2>>

export function runSequence(
  sequence: Sequence,
  fixtures?: any,
  options?: any
): Promise<any>

interface CerebralTestType {
  controller: BaseControllerClass
  runSequence<T = any>(sequence: Sequence | string, props?: any): Promise<T>
  setState(path: string, value: any): void
  getState(path: string): any
}

export function CerebralTest(
  rootModule: ModuleClass | ModuleDefinition,
  options?: any
): CerebralTestType
