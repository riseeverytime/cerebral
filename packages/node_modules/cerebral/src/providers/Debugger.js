import { Provider } from '../'

export default function DebuggerProvider(devtools) {
  return Provider(
    (context, functionDetails, payload, prevPayload) => {
      if (devtools.preventPropsReplacement) {
        Object.keys(payload).forEach(key => {
          if (
            prevPayload &&
            key in prevPayload &&
            prevPayload[key] !== payload[key]
          ) {
            throw new Error(
              `Cerebral Devtools - You have activated the "preventPropsReplacement" option and in signal "${context
                .execution
                .name}", before the action "${functionDetails.name}", the key "${key}" was replaced`
            )
          }
        })
      }

      return {
        send(debuggerData) {
          devtools.sendExecutionData(
            debuggerData,
            context,
            functionDetails,
            payload
          )
        },
        wrapProvider(name, provider) {
          return Object.keys(provider).reduce((wrappedProvider, key) => {
            const originalFunc = provider[key]

            wrappedProvider[key] = (...args) => {
              context.debugger.send({
                method: `${name}.${key}`,
                args: args,
              })

              return originalFunc.apply(provider, args)
            }

            return wrappedProvider
          }, {})
        },
      }
    },
    {
      cache: false,
      wrap: false,
    }
  )
}
