/* eslint-env mocha */
import App, { moduleState } from '../'

import assert from 'assert'

describe('module', () => {
  it('should be able to GET state', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        foo: [({ get }) => assert.deepStrictEqual(get(moduleState`foo`), 'bar')],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('foo')()
  })
  it('should be able to GET state from submodule', () => {
    const subModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        foo: [({ get }) => assert.deepStrictEqual(get(moduleState`foo`), 'bar')],
      },
    }
    const rootModule = {
      modules: { subModule },
    }
    const controller = App(rootModule)

    controller.getSequence('subModule.foo')()
  })
  it('should be able to SET state', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        foo: [({ store }) => store.set(moduleState`foo`, 'bar2')],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('foo')()
    assert.deepStrictEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should be able to SET state in subModule', () => {
    const subModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        foo: [({ store }) => store.set(moduleState`foo`, 'bar2')],
      },
    }
    const rootModule = {
      modules: { subModule },
    }
    const controller = App(rootModule)
    controller.getSequence('subModule.foo')()
    assert.deepStrictEqual(controller.getState(), { subModule: { foo: 'bar2' } })
  })
  it('should work with devtools', () => {
    const subModule = {
      state: {
        foo: ['foo'],
      },
      sequences: {
        foo: [({ store }) => store.splice(moduleState`foo`, 0, 1, 'bar')],
      },
    }
    const rootModule = {
      modules: { subModule },
    }
    const controller = App(rootModule, {
      devtools: {
        init() {},
        send() {},
        sendExecutionData(data) {
          assert.strictEqual(data.method, 'splice')
          assert.deepStrictEqual(data.args[0], ['subModule', 'foo'])
        },
      },
    })
    controller.getSequence('subModule.foo')()
    assert.deepStrictEqual(controller.getState(), { subModule: { foo: ['bar'] } })
  })
})
