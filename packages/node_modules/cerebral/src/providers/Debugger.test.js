/* eslint-env mocha */
import { Controller, Module } from '../'
import assert from 'assert'

describe('Debugger', () => {
  it('should send debuggerData', () => {
    const rootModule = Module({
      signals: {
        foo: [
          context => {
            context.debugger.send(1)
          },
        ],
      },
    })
    const controller = Controller(rootModule, {
      devtools: {
        init() {},
        send() {},
        sendExecutionData(debuggerData) {
          assert.equal(debuggerData, 1)
        },
      },
    })
    controller.getSignal('foo')()
  })
  it('should wrap provider', () => {
    function MyProvider(options = {}) {
      let cachedProvider = null

      function createProvider(context) {
        return {
          doSomething() {},
        }
      }

      return context => {
        context.myProvider = cachedProvider =
          cachedProvider || createProvider(context)

        if (context.debugger) {
          context.debugger.wrapProvider('myProvider')
        }

        return context
      }
    }
    const rootModule = Module({
      provider: MyProvider(),
      signals: {
        foo: [
          ({ myProvider }) => {
            myProvider.doSomething(1)
          },
        ],
      },
    })
    const controller = Controller(rootModule, {
      devtools: {
        init() {},
        send() {},
        sendExecutionData(debuggerData) {
          assert.deepEqual(debuggerData, {
            method: 'myProvider.doSomething',
            args: [1],
          })
        },
      },
    })
    controller.getSignal('foo')()
  })
  it('throw send debuggerData', () => {
    const rootModule = Module({
      signals: {
        foo: [() => {}],
      },
    })
    const controller = Controller(rootModule, {
      devtools: {
        init() {},
        send() {},
        sendExecutionData() {},
        preventPropsReplacement: true,
      },
    })
    controller.getSignal('foo')()
  })
  it('should be able to call wrapped providers directly', () => {
    let isCalled = false
    const foo = Module({
      provider: function ProviderA(context) {
        context.providerA = {
          foo() {},
        }

        context.debugger.wrapProvider('providerA')

        return context
      },
    })
    const bar = Module({
      provider: function ProviderB(context) {
        context.providerB = {
          foo() {
            return context.providerA.foo.direct()
          },
        }

        return context
      },
    })
    const rootModule = Module({
      modules: {
        foo,
        bar,
      },
      signals: {
        foo: [
          ({ providerB }) => {
            providerB.foo()
          },
        ],
      },
    })
    const controller = Controller(rootModule, {
      devtools: {
        init() {},
        sendExecutionData() {
          isCalled = true
        },
      },
    })
    controller.getSignal('foo')()
    assert(!isCalled)
  })
})
